global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5s
        timeout client  15min
        timeout server  15min
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

# added the stuff below in order to request http auth when accessing OctoPrint via port 8050
# allows to open port 8050 on fritzbox to access the server on port 5000 a bit more securely
# from https://community.octoprint.org/t/how-to-enable-http-authentication-on-haproxy/180/3
# edits for haproxy 2.2: https://community.octoprint.org/t/reverse-proxy-configuration-examples/1107/31
userlist NonLocalUsers
        user voglerr password secret_hash

frontend public
        bind :::8050 v4v6
        bind :::443 v4v6 ssl crt /etc/haproxy/cert/
        option forwardfor except 127.0.0.1
        acl Auth_OctoPrintUsers http_auth(NonLocalUsers)
        http-request auth realm OctoPrint if !Auth_OctoPrintUsers
        use_backend webcam if { path_beg /webcam/ }
        default_backend octoprint

backend octoprint
        acl ValidOctoPrintUser http_auth(NonLocalUsers)
        http-request auth realm OctoPrint if !ValidOctoPrintUser
        acl needs_scheme req.hdr_cnt(X-Scheme) eq 0
        http-request set-header X-Forwarded-Proto https if { ssl_fc }
        http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
        option forwardfor
        server octoprint1 127.0.0.1:5000 check maxconn 10
        # timeout queue 10s

# http://rpi4:8050/webcam/?action=stream
backend webcam
        http-request replace-path /webcam/(.*)   /\1
        server webcam1  127.0.0.1:8090
